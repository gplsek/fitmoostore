<?php
function fitmoo_checkout_menu() {
  $items = array();


  $items['fitmoo/checkout/%/%/%'] = array(
    'page callback' => '_create_order',
    'page arguments' => array(2,3,4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
//  $items['userlogin/%'] = array(
//    'page callback' => 'fitmoo_checkout_userlogin',
//    'page arguments' => array(1),
//    'access callback' => TRUE,
//    'type' => MENU_CALLBACK,
//  );
  $items['admin/commerce/config/commissions'] = array(
  'title' => 'Set Commisions',
  'description' => 'Manage commision amount',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('fitmoo_checkout_commisions'),
  'access arguments' => array('access site-wide contact form'),
  'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/commerce/config/shipping/set_shipping_fee'] = array(
        'title' => 'Set Shipping Fee',
        'description' => 'Manage shipping fee',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('fitmoo_checkout_setShippingFee'),
        'access arguments' => array('access site-wide contact form'),
        'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/endicia/set_default_dimensions'] = array(
      'title' => 'Set Default Pack Dimensions',
      'description' => 'Default Pack Dimensions',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fitmoo_checkout_setDimensions'),
      'access arguments' => array('access site-wide contact form'),
      'type' => MENU_NORMAL_ITEM,
  );


  return $items;
}

//function fitmoo_checkout_userlogin($sessionID){
//	global $user;
//
//	$result = db_select('sessions', 's')
//	    ->fields('s', array('uid'))
//	    ->condition('s.sid', $sessionID)
//	    ->execute()
//	    ->fetchAssoc();
//
//	if($result){
//		$uid = $result['uid'];
//
//		$user = user_load($uid);
//		drupal_session_regenerate();
//
//		drupal_goto('checkout');
//	}else{
//
//		//invalid user goaway
//
//	}
//
//
//
//}

function _create_order($id,$uid,$qty = 1){
	global $user;
	$user = user_load($uid);
	drupal_session_regenerate();
$product_id = 1;
// Create the new order in checkout; you might also check first to
// see if your user already has an order to use instead of a new one.
$order = commerce_order_new($user->uid, 'checkout_checkout');

// Save the order to get its ID.
commerce_order_save($order);

// Load whatever product represents the item the customer will be
// paying for and create a line item for it.
//commerce_product_line_item_new(product,quantity,order_id)
$product = commerce_product_load($product_id);
$line_item = commerce_product_line_item_new($product, $qty, $order->order_id);

// Save the line item to get its ID.
commerce_line_item_save($line_item);

// Add the line item to the order using fago's rockin' wrapper.
$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
$order_wrapper->commerce_line_items[] = $line_item;

// Save the order again to update its line item reference field.
commerce_order_save($order);

// Redirect to the order's checkout form. Obviously, if this were a
// form submit handler, you'd just set $form_state['redirect'].
drupal_goto('checkout/' . $order->order_id);

}


function fitmoo_checkout_commisions(){
	
	$form['info'] = array(
		'#type'=> 'item',
		 '#markup'=> t('Set percentage splits'),
		
	);
	
    $form['seller'] = array(
    '#type' => 'textfield',
	'#size' => 10,
    '#title' => t('Seller %'),
    '#default_value' => variable_get("seller_perc", ""),
    
    );
    $form['buyer'] = array(
    '#type' => 'textfield',
	'#size' => 10,
    '#title' => t('Buer %'),
    '#default_value' => variable_get("buyer_perc", ""),
    
    );
    $form['fitmoo'] = array(
    '#type' => 'textfield',
	'#size' => 10,
    '#title' => t('Fitmoo %'),
    '#default_value' => variable_get("fitmoo_perc", ""),
    
    );
	
    $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    );
 
 
    return $form;
}

function fitmoo_checkout_setDimensions(){

    $form['info'] = array(
        '#type'=> 'item',
        '#markup'=> t('Set Default Pack Dimensions'),

    );

    $form['length'] = array(
        '#type' => 'textfield',
        '#size' => 10,
        '#title' => t('length (in)'),
        '#default_value' => variable_get("endicia_length", "0"),

    );
    $form['height'] = array(
        '#type' => 'textfield',
        '#size' => 10,
        '#title' => t('height (in)'),
        '#default_value' => variable_get("endicia_height", "0"),

    );
    $form['width'] = array(
        '#type' => 'textfield',
        '#size' => 10,
        '#title' => t('width (in)'),
        '#default_value' => variable_get("endicia_width", "0"),

    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Update'),
    );


    return $form;
}

function fitmoo_checkout_setShippingFee(){

    $types = commerce_product_reference_node_types();
    $form['info'] = array(
        '#type'=> 'item',
        '#markup'=> t('Set shipping fees and default weigth'),
    );

    foreach ($types as $type => $info) {
        $form[$info->type] = array(
            '#type' => 'textfield',
            '#size' => 10,
            '#title' => t("Set shipping fee for ".$info->name." (USD)"),
            '#default_value' => variable_get($info->type."_fee", "0.00"),
        );

        $form[$info->type."_w"] = array(
            '#type' => 'textfield',
            '#size' => 10,
            '#title' => t("Set default weigth for ".$info->name." (oz)"),
            '#default_value' => variable_get($info->type."_w", "00"),
            '#suffix' => '<hr />',
        );

    }


    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Update'),
    );

    return $form;
}


function fitmoo_checkout_commisions_submit($form, &$form_state) {
    if ($form_state['values']['seller']) {

        variable_set("seller_perc", $form_state['values']['seller']);
        variable_set("buyer_perc", $form_state['values']['buyer']);
        variable_set("fitmoo_perc", $form_state['values']['fitmoo']);
        drupal_set_message(t("Updated Commission Percentages."));

    }
    return $form;
}


function fitmoo_checkout_setDimensions_submit($form, &$form_state) {
    if ($form_state['values']['length'] or $form_state['values']['height'] or $form_state['values']['width']) {
        variable_set("endicia_length", $form_state['values']['length']);
        variable_set("endicia_height", $form_state['values']['height']);
        variable_set("endicia_width", $form_state['values']['width']);
        drupal_set_message(t("Updated Commission Percentages."));

    }
    return $form;
}

function fitmoo_checkout_setShippingFee_submit($form, &$form_state) {
    $types = commerce_product_reference_node_types();

    //====OR MAY BE STORE ARRAY IN SETVAR ?
    foreach ($types as $type => $info) {
        if ($form_state['values'][$info->type] != '' && !is_numeric($form_state['values'][$info->type])) {
            form_error($element, t('%name must be a number.', array('%name' => $element['#title'])));
        } else {
            variable_set($info->type."_fee", $form_state['values'][$info->type]);
        }
        if ($form_state['values'][$info->type."_w"] != '' && !is_numeric($form_state['values'][$info->type."_w"])) {
            form_error($element, t('%name must be a number.', array('%name' => $element['#title'])));
        } else {
            variable_set($info->type."_w", $form_state['values'][$info->type."_w"]);
        }

    }
    drupal_set_message(t("Shipping fees and default weigth are Updated."));
    return $form;
}


function fitmoo_checkout_calc_comisions($params){
	
	
	//seller
	$sell_com = ($params['total']/100)*variable_get("seller_perc", "");
	
    $id = db_insert('fitmoo_user_accounting')
      ->fields(array(
        'uid' => $params['seller_uid'],   //user ID
        'type' => 'seller', // buyer, seller, reference, fitmoo
        'ammount' => $sell_com, // 20.00
  	    'percentage' => variable_get("seller_perc", ""), // commisions percent example seller now is 80
		'orderID' => $params['orderID'],
		'productID' => $params['productID'],
		'status' => 'pending', //pending, cleared, credit , withdrawn
        'created' => REQUEST_TIME,
		'updated' => REQUEST_TIME,
      ))
      ->execute(); 
	  
	  
  	//buyer
  	$buyer_com = ($params['total']/100)*variable_get("buyer_perc", "");
	
      $id = db_insert('fitmoo_user_accounting')
        ->fields(array(
          'uid' => $params['buyer_uid'],   //user ID
          'type' => 'buyer', // buyer, seller, reference, fitmoo
          'ammount' => $buyer_com, // 20.00
    	  'percentage' => variable_get("buyer_perc", ""), // commisions percent example seller now is 80
		  'orderID' => $params['orderID'],
		  'productID' => $params['productID'],
  		  'status' => 'pending', //pending, cleared, credit , withdrawn
          'created' => REQUEST_TIME,
  		  'updated' => REQUEST_TIME,
        ))
        ->execute(); 
		
		
	  	//buyer
	  	$fitmoo_com = ($params['total']/100)*variable_get("fitmoo_perc", "");
	
	      $id = db_insert('fitmoo_user_accounting')
	        ->fields(array(
	        'uid' => 1,   //user ID
	        'type' => 'fitmoo', // buyer, seller, reference, fitmoo
	        'ammount' => $fitmoo_com, // 20.00
	    	'percentage' => variable_get("fitmoo_perc", ""), // commisions percent example seller now is 80
			'orderID' => $params['orderID'],
			'productID' => $params['productID'],
	  		'status' => 'pending', //pending, cleared, credit , withdrawn
	        'created' => REQUEST_TIME,
	  		'updated' => REQUEST_TIME,
	        ))
	        ->execute(); 
	
			return $buyer_com + $fitmoo_com;
	
}

/**                                                                             
 * Implements hook_commerce_checkout_complete().                                
 */                                                                             
function fitmoo_checkout_commerce_checkout_complete($order) {
  // Iterate through every commerce line item added in product.
  foreach (field_get_items('commerce_order', $order, 'commerce_line_items') as $line_item_id) {

    // Load commerce line item by line item id.
    $line_item = commerce_line_item_load($line_item_id['line_item_id']);

    // We do not want to include shipping cost in userpoints.
    if ($line_item->type != 'shipping') {
      // Load commerce product by product id.
      $temp = field_get_items('commerce_line_item', $line_item, 'commerce_product');
	  
      $product = commerce_product_load($temp[0]['product_id']);
	 

      // Create parameters.
      $params = array(
        'seller_uid' => $product->uid,  //seller uid
        'total' => commerce_currency_amount_to_decimal($product->commerce_price['und'][0]['amount'], $product->commerce_price['und'][0]['currency_code']),
		'buyer_uid' => $order->uid,
		'orderID' => $order->order_id,
		'productID' => $product->product_id,
	      );

      // Grant userpoints programmatically.
      $fitmoo_fee = fitmoo_checkout_calc_comisions($params);
	  
	  $order->field_fitmoo_fee['und'][0]['value'] = $fitmoo_fee * 100;
	  $order->field_new_total['und'][0]['value'] = $order->commerce_order_total['und'][0]['amount'] - ($fitmoo_fee * 100);
	 
	  commerce_order_save($order);
    }
  }
}

function fitmoo_checkout_commerce_cart_product_prepare($order, $product, $quantity) {
	foreach ($order->commerce_line_items['und'] as $line) {
	    $line_item = commerce_line_item_load($line['line_item_id']);
	    if($product->product_id != $line_item->commerce_product['und'][0]['product_id']){

			commerce_cart_order_product_line_item_delete($order, $line['line_item_id'], FALSE);
		}
	  }
}

function fitmoo_checkout_menu_alter(&$item) {
  // Hide the "Create new account" tab
  $item['user/register']['type'] = MENU_CALLBACK;
  $item['user/password']['type'] = MENU_CALLBACK;
}

function fitmoo_checkout_commerce_cart_product_add($order, $product, $quantity, $line_item){
    //commerce_kiala_commerce_line_item_update($line_item);
    // Hide the "Create new account" tab
  $data['commerce_product'] = $product->product_id;
  _add_manual_shipping_line_item($order, $data);
}


function _add_manual_shipping_line_item($order, $data) {
    $product = commerce_services_retrieve_entity('commerce_product', $data['commerce_product'], false, false);
    $unit_price = array(
        "amount"=>100,
        "currency_code"=>"USD",
        "data"=>array(
            "components"=>array(
                "0"=>array(
                    "name"=>"shipping",
                    "price"=>array(
                        "amount"=>100,
                        "currency_code"=>"USD",
                        "data"=>array(),
                    ),
                    "included"=>true,
                ),
            ),
        ),
    );

    $shipping_service = array(
        "name"=>"example_shipping_service",
        "base"=>"example_shipping_service",
        "display_title" => "Shipping",
        "description"=>"Set shipping fy by product type",
        "shipping_method"=>"example_shipping_method",
        "rules_component"=>true,
        "price_component"=>"shipping",
        "weight"=>2,
        "callbacks"=>array(
            "rate"=>"commerce_shipping_example_service_rate",
            "details_form"=>"commerce_shipping_example_service_details_form",
            "details_form_validate"=>"commerce_shipping_example_service_details_form_validate",
            "details_form_submit"=>"commerce_shipping_example_service_details_form_submit"
        ),
        "module"=>"commerce_shipping_example",
        "title"=>"Example shipping service",
        "admin_list"=>true,
        "base_rate"=>array("amount"=>100)
    );

    $temp = new stdClass();
    $temp->type="shipping";
    $temp->order_id=$order->order_id;
    $temp->quantity = 1;
    $temp->data=array("shipping_service"=>$shipping_service);
    $temp->line_item_id=null;
    $temp->line_item_label="Shipping";
    $temp->created="";
    $temp->changed="";
    $temp->is_new=true;
    $temp->commerce_shipping_service=array("und"=>array("0"=>array("value"=>"example_shipping_service")));
    $temp->commerce_unit_price = array("und"=>array("0"=>$unit_price));
    $temp->weight=2;
    $order->shipping_rates['example_shipping_service']=$temp;


//    $shipping_service_name= 'example_shipping_service';
//
//    $shipping_service = commerce_shipping_service_load($shipping_service_name);
//    if (empty($shipping_service)) {
//        return;
//    }
//    // Collect shipping rates for the order.
//    commerce_shipping_collect_rates($order);
//    if (empty($order->shipping_rates) || empty($order->shipping_rates[$shipping_service_name])) {
//        return;
//    }



    $shipping_types_array=array();

    //====OR MAY BE STORE ARRAY IN SETVAR ?
    $types = commerce_product_reference_node_types();
    foreach ($types as $type => $info) {
        $shipping_types_array[$info->type]=variable_get($info->type."_fee", "");
    }


    $order->shipping_rates['example_shipping_service']->data['shipping_service']['base_rate']['amount'] = $shipping_types_array[$product->type]*100;
    $order->shipping_rates['example_shipping_service']->commerce_unit_price['und'][0]['amount'] = $shipping_types_array[$product->type]*100;
    $order->shipping_rates['example_shipping_service']->commerce_unit_price['und'][0]['data']['components'][0]['price']['amount'] = $shipping_types_array[$product->type]*100;
    // Extract the unit price from the calculated rate.
    $rate_line_item = $order->shipping_rates['example_shipping_service'];
    $rate_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $rate_line_item);
    $unit_price = $rate_line_item_wrapper->commerce_unit_price->value();

    // Create a new shipping line item with the calculated rate.
    $line_item = commerce_shipping_line_item_new('example_shipping_service', $unit_price, $order->order_id, $rate_line_item->data, $rate_line_item->type);


    // Delete any existing shipping line items from the order.
    commerce_shipping_delete_shipping_line_items($order, false);

    // Save and add the line item to the order.
    return commerce_shipping_add_shipping_line_item($line_item, $order, false);
}


function fitmoo_checkout_commerce_checkout_progress_items_alter(&$items){
	unset($items['payment']);
}

function fitmoo_checkout_form_alter(&$form, &$form_state, $form_id) {
  
  if ($form_id == 'commerce_checkout_form_checkout') {
    $form['buttons']['cancel']['#submit'][] = 'fitmoo_checkout_form_cancel_submit';  
  }
  
  if ($form_id == 'commerce_checkout_form_review') {
    unset($form['checkout_review']);  
  }
}

/**
 * Modifying the commerce_cart_checkout_form_cancel_submit function in commerce_cart.module
 */
function fitmoo_checkout_form_cancel_submit($form, &$form_state) {
  global $user;
  // Update the order to the cart status.
  $order = commerce_order_load($form_state['order']->order_id);
  $form_state['order'] = commerce_order_status_update($order, 'cart', TRUE);

  // Skip saving in the status update and manually save here to force a save
  // even when the status doesn't actually change.
  if (variable_get('commerce_order_auto_revision', TRUE)) {
    $form_state['order']->revision = TRUE;
    $form_state['order']->log = t('Customer manually canceled the checkout process.');
  }

  commerce_order_delete($order->id);

  //drupal_set_message(t('Checkout of your current order has been canceled and may be resumed when you are ready.'));

  // Redirect to firmoo on cancel.
  
  module_invoke_all('user_logout', $user);
  session_destroy();
  
  if(isset($_SESSION['callback'])){
  	$form_state['redirect'] = $_SESSION['callback']; //the page you want to redirect to.
  }else{
  	$form_state['redirect'] = variable_get('anonymous_redirect_base', ''); //the page you want to redirect to.
  }
  
}

function fitmoo_checkout_commerce_checkout_router($order, $checkout_page) {
	global $user;
	if($order->status == 'pending'){
		module_invoke_all('user_logout', $user);
		session_destroy();
      drupal_goto(variable_get('anonymous_redirect_base', '').'/dashboard/purchases');
    }
}

function fitmoo_checkout_check_stock(){
	global $user;
	$uid = $user->uid;  
	$order_id = commerce_cart_order_id($uid);
	
	$order = commerce_order_load($order_id);
	
    foreach (field_get_items('commerce_order', $order, 'commerce_line_items') as $line_item_id) {

      // Load commerce line item by line item id.
      $line_item = commerce_line_item_load($line_item_id['line_item_id']);

      // We do not want to include shipping cost in userpoints.
      if ($line_item->type != 'shipping') {
        // Load commerce product by product id.
        $temp = field_get_items('commerce_line_item', $line_item, 'commerce_product');
	  
        $product = commerce_product_load($temp[0]['product_id']);
		if(floatval($product->commerce_stock['und'][0]['value']) < 1.00){
			commerce_order_delete($order_id);
		    // Redirect to firmoo on cancel.
		    if(isset($_SESSION['callback'])){
		    	$form_state['redirect'] = $_SESSION['callback']; //the page you want to redirect to.
		    }else{
		    	$form_state['redirect'] = variable_get('anonymous_redirect_base', ''); //the page you want to redirect to.
		    }
		}
	  }
	  
  }
    return;	
	
}

function fitmoo_checkout_sold_by(){
	global $user;
	$uid = $user->uid;  
	$order_id = commerce_cart_order_id($uid);
	
	$order = commerce_order_load($order_id);
	
    foreach (field_get_items('commerce_order', $order, 'commerce_line_items') as $line_item_id) {

      // Load commerce line item by line item id.
      $line_item = commerce_line_item_load($line_item_id['line_item_id']);

      // We do not want to include shipping cost in userpoints.
      if ($line_item->type != 'shipping') {
        // Load commerce product by product id.
        $temp = field_get_items('commerce_line_item', $line_item, 'commerce_product');
	  
        $product = commerce_product_load($temp[0]['product_id']);
		
		$seller = user_load($product->uid);
		return $seller->mail;
		
	  }
	  
  }
	
   return;	
}

// /**
//  * Implements hook_form_FORMID_alter() for `commerce_checkout_form_checkout`.
//  */
// function fitmoo_checkout_form_commerce_checkout_form_checkout_alter(&$form, &$form_state) {
// 
//   // Get the addressfield element we're modifying.
//   // Adapted from addressfield.module/addressfield_field_widget_form()
//   $element =& $form['customer_profile_shipping']['commerce_customer_address'][LANGUAGE_NONE][0];
//   $element_key = $element['element_key']['#value'];
//   $field = $form_state['field']['#parents']['customer_profile_shipping']['#fields']['commerce_customer_address'][LANGUAGE_NONE]['field'];
//   $instance = $form_state['field']['#parents']['customer_profile_shipping']['#fields']['commerce_customer_address'][LANGUAGE_NONE]['instance'];
//   $delta = $element['#delta'];
//   $settings = $instance['widget']['settings'];
//   $langcode = $element['#language'];
//   $items = array($delta => $element['#address']);
// 
//   // Get the default address used to build the widget form elements, looking
//   // first in the form state, then in the stored value for the field, and then
//   // in the default values of the instance.
//   $address = array();
// 
//   if (!empty($form_state['addressfield'][$element_key])) {
//     // Use the value from the form_state if available.
//     $address = $form_state['addressfield'][$element_key];
//   }
//   elseif (!empty($items[$delta]['country'])) {
//     // Else use the saved value for the field.
//     $address = $items[$delta];
//   }
//   else {
//     // Otherwise use the instance default.
//     $address = (array) $instance['default_value'][0];
//   }
// 
//   // Set the default country here, based on the available values
//   // provided by the addressfield module.
//   // THAT'S THE PAYLOAD!
//   
//   if ($address['country'] != 'US') {
//     $address['country'] = 'US';
//     $address['administrative_area'] = '';
//   }
// 
//   // After setting the value above, merge the default values
//   // to provide a value for every expected array key.
//   print_r($field);die();
//   $countries = _addressfield_country_options_list($field, $instance);
//   print_r($countries);
//   $address += addressfield_default_values($countries);
//   print $address['country'];die();
// 
// 
//   // Add the form elements for the standard widget, which includes a country
//   // select list at the top that reloads the available address elements when the
//   // country is changed.
//   if ($instance['widget']['type'] == 'addressfield_standard') {
//     // Generate the address form.
//     $context = array(
//       'mode' => 'form',
//       'field' => $field,
//       'instance' => $instance,
//       'langcode' => $langcode,
//       'delta' => $delta,
//     );
//     $element = array_merge($element, addressfield_generate($address, $settings['format_handlers'], $context));
// 
//     // Mark the form element as required if necessary.
//     $element['#required'] = $delta == 0 && $instance['required'];
//   }
// }
// 
// 

