<?php
function fitmoo_checkout_menu() {
  $items = array();


  $items['fitmoo/checkout/%/%/%'] = array(
    'page callback' => '_create_order',
    'page arguments' => array(2,3,4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
//  $items['userlogin/%'] = array(
//    'page callback' => 'fitmoo_checkout_userlogin',
//    'page arguments' => array(1),
//    'access callback' => TRUE,
//    'type' => MENU_CALLBACK,
//  );
  $items['admin/commerce/config/commissions'] = array(
  'title' => 'Set Commisions',
  'description' => 'Manage commision amount',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('fitmoo_checkout_commisions'),
  'access arguments' => array('access site-wide contact form'),
  'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/commerce/config/shipping/set_shipping_fee'] = array(
        'title' => 'Set Shipping Fee',
        'description' => 'Manage shipping fee',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('fitmoo_checkout_setShippingFee'),
        'access arguments' => array('access site-wide contact form'),
        'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/endicia/set_default_dimensions'] = array(
      'title' => 'Set Default Pack Dimensions',
      'description' => 'Default Pack Dimensions',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fitmoo_checkout_setDimensions'),
      'access arguments' => array('access site-wide contact form'),
      'type' => MENU_NORMAL_ITEM,
  );


  return $items;
}

//function fitmoo_checkout_userlogin($sessionID){
//	global $user;
//
//	$result = db_select('sessions', 's')
//	    ->fields('s', array('uid'))
//	    ->condition('s.sid', $sessionID)
//	    ->execute()
//	    ->fetchAssoc();
//
//	if($result){
//		$uid = $result['uid'];
//
//		$user = user_load($uid);
//		drupal_session_regenerate();
//
//		drupal_goto('checkout');
//	}else{
//
//		//invalid user goaway
//
//	}
//
//
//
//}

function _create_order($id,$uid,$qty = 1){
	global $user;
	$user = user_load($uid);
	drupal_session_regenerate();
$product_id = 1;
// Create the new order in checkout; you might also check first to
// see if your user already has an order to use instead of a new one.
$order = commerce_order_new($user->uid, 'checkout_checkout');

// Save the order to get its ID.
commerce_order_save($order);

// Load whatever product represents the item the customer will be
// paying for and create a line item for it.
//commerce_product_line_item_new(product,quantity,order_id)
$product = commerce_product_load($product_id);
$line_item = commerce_product_line_item_new($product, $qty, $order->order_id);

// Save the line item to get its ID.
commerce_line_item_save($line_item);

// Add the line item to the order using fago's rockin' wrapper.
$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
$order_wrapper->commerce_line_items[] = $line_item;

// Save the order again to update its line item reference field.
commerce_order_save($order);

// Redirect to the order's checkout form. Obviously, if this were a
// form submit handler, you'd just set $form_state['redirect'].
drupal_goto('checkout/' . $order->order_id);

}


function fitmoo_checkout_commisions(){
	
	$form['info'] = array(
		'#type'=> 'item',
		 '#markup'=> t('Set percentage splits'),
		
	);
	
    $form['seller'] = array(
    '#type' => 'textfield',
	'#size' => 10,
    '#title' => t('Seller %'),
    '#default_value' => variable_get("seller_perc", ""),
    
    );
    $form['buyer'] = array(
    '#type' => 'textfield',
	'#size' => 10,
    '#title' => t('Buer %'),
    '#default_value' => variable_get("buyer_perc", ""),
    
    );
    $form['fitmoo'] = array(
    '#type' => 'textfield',
	'#size' => 10,
    '#title' => t('Fitmoo %'),
    '#default_value' => variable_get("fitmoo_perc", ""),
    
    );
	
    $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    );
 
 
    return $form;
}

function fitmoo_checkout_setDimensions(){

    $form['info'] = array(
        '#type'=> 'item',
        '#markup'=> t('Set Default Pack Dimensions'),

    );

    $form['length'] = array(
        '#type' => 'textfield',
        '#size' => 10,
        '#title' => t('length (in)'),
        '#default_value' => variable_get("endicia_length", "0"),

    );
    $form['height'] = array(
        '#type' => 'textfield',
        '#size' => 10,
        '#title' => t('height (in)'),
        '#default_value' => variable_get("endicia_height", "0"),

    );
    $form['width'] = array(
        '#type' => 'textfield',
        '#size' => 10,
        '#title' => t('width (in)'),
        '#default_value' => variable_get("endicia_width", "0"),

    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Update'),
    );


    return $form;
}

function fitmoo_checkout_setShippingFee(){

    $types = commerce_product_reference_node_types();
    $form['info'] = array(
        '#type'=> 'item',
        '#markup'=> t('Set shipping fees and default weigth'),
    );

    foreach ($types as $type => $info) {
        $form[$info->type] = array(
            '#type' => 'textfield',
            '#size' => 10,
            '#title' => t("Set shipping fee for ".$info->name." (USD)"),
            '#default_value' => variable_get($info->type."_fee", "0.00"),
        );

        $form[$info->type."_w"] = array(
            '#type' => 'textfield',
            '#size' => 10,
            '#title' => t("Set default weigth for ".$info->name." (oz)"),
            '#default_value' => variable_get($info->type."_w", "00"),
            '#suffix' => '<hr />',
        );

    }


    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Update'),
    );

    return $form;
}


function fitmoo_checkout_commisions_submit($form, &$form_state) {
    if ($form_state['values']['seller']) {

        variable_set("seller_perc", $form_state['values']['seller']);
        variable_set("buyer_perc", $form_state['values']['buyer']);
        variable_set("fitmoo_perc", $form_state['values']['fitmoo']);
        drupal_set_message(t("Updated Commission Percentages."));

    }
    return $form;
}


function fitmoo_checkout_setDimensions_submit($form, &$form_state) {
    if ($form_state['values']['length'] or $form_state['values']['height'] or $form_state['values']['width']) {
        variable_set("endicia_length", $form_state['values']['length']);
        variable_set("endicia_height", $form_state['values']['height']);
        variable_set("endicia_width", $form_state['values']['width']);
        drupal_set_message(t("Updated Commission Percentages."));

    }
    return $form;
}

function fitmoo_checkout_setShippingFee_submit($form, &$form_state) {
    $types = commerce_product_reference_node_types();

    //====OR MAY BE STORE ARRAY IN SETVAR ?
    foreach ($types as $type => $info) {
        if ($form_state['values'][$info->type] != '' && !is_numeric($form_state['values'][$info->type])) {
            form_error($element, t('%name must be a number.', array('%name' => $element['#title'])));
        } else {
            variable_set($info->type."_fee", $form_state['values'][$info->type]);
        }
        if ($form_state['values'][$info->type."_w"] != '' && !is_numeric($form_state['values'][$info->type."_w"])) {
            form_error($element, t('%name must be a number.', array('%name' => $element['#title'])));
        } else {
            variable_set($info->type."_w", $form_state['values'][$info->type."_w"]);
        }

    }
    drupal_set_message(t("Shipping fees and default weigth are Updated."));
    return $form;
}


function fitmoo_checkout_calc_comisions($params){
	
	
	//seller
	$sell_com = ($params['total']/100)*variable_get("seller_perc", "");
	
    $id = db_insert('fitmoo_user_accounting')
      ->fields(array(
        'uid' => $params['seller_uid'],   //user ID
        'type' => 'seller', // buyer, seller, reference, fitmoo
        'ammount' => $sell_com, // 20.00
  	    'percentage' => variable_get("seller_perc", ""), // commisions percent example seller now is 80
		'orderID' => $params['orderID'],
		'productID' => $params['productID'],
		'status' => 'pending', //pending, cleared, credit , withdrawn
        'created' => REQUEST_TIME,
		'updated' => REQUEST_TIME,
      ))
      ->execute(); 
	  
	  
  	//buyer
  	$buyer_com = ($params['total']/100)*variable_get("buyer_perc", "");
	
      $id = db_insert('fitmoo_user_accounting')
        ->fields(array(
          'uid' => $params['buyer_uid'],   //user ID
          'type' => 'buyer', // buyer, seller, reference, fitmoo
          'ammount' => $buyer_com, // 20.00
    	  'percentage' => variable_get("buyer_perc", ""), // commisions percent example seller now is 80
		  'orderID' => $params['orderID'],
		  'productID' => $params['productID'],
  		  'status' => 'pending', //pending, cleared, credit , withdrawn
          'created' => REQUEST_TIME,
  		  'updated' => REQUEST_TIME,
        ))
        ->execute(); 
		
		
	  	//buyer
	  	$fitmoo_com = ($params['total']/100)*variable_get("fitmoo_perc", "");
	
	      $id = db_insert('fitmoo_user_accounting')
	        ->fields(array(
	        'uid' => 1,   //user ID
	        'type' => 'fitmoo', // buyer, seller, reference, fitmoo
	        'ammount' => $fitmoo_com, // 20.00
	    	'percentage' => variable_get("fitmoo_perc", ""), // commisions percent example seller now is 80
			'orderID' => $params['orderID'],
			'productID' => $params['productID'],
	  		'status' => 'pending', //pending, cleared, credit , withdrawn
	        'created' => REQUEST_TIME,
	  		'updated' => REQUEST_TIME,
	        ))
	        ->execute(); 
	
	
	
}

/**                                                                             
 * Implements hook_commerce_checkout_complete().                                
 */                                                                             
function fitmoo_checkout_commerce_checkout_complete($order) {
  // Iterate through every commerce line item added in product.
  foreach (field_get_items('commerce_order', $order, 'commerce_line_items') as $line_item_id) {

    // Load commerce line item by line item id.
    $line_item = commerce_line_item_load($line_item_id['line_item_id']);

    // We do not want to include shipping cost in userpoints.
    if ($line_item->type != 'shipping') {
      // Load commerce product by product id.
      $temp = field_get_items('commerce_line_item', $line_item, 'commerce_product');
	  
      $product = commerce_product_load($temp[0]['product_id']);
	 

      // Create parameters.
      $params = array(
        'seller_uid' => $product->uid,  //seller uid
        'total' => commerce_currency_amount_to_decimal($product->commerce_price['und'][0]['amount'], $product->commerce_price['und'][0]['currency_code']),
		'buyer_uid' => $order->uid,
		'orderID' => $order->order_id,
		'productID' => $product->product_id,
	      );

      // Grant userpoints programmatically.
      fitmoo_checkout_calc_comisions($params);
    }
  }
}

function fitmoo_checkout_commerce_cart_product_prepare($order, $product, $quantity) {
	foreach ($order->commerce_line_items['und'] as $line) {
	    $line_item = commerce_line_item_load($line['line_item_id']);
	    if($product->product_id != $line_item->commerce_product['und'][0]['product_id']){

			commerce_cart_order_product_line_item_delete($order, $line['line_item_id'], FALSE);
		}
	  }
}

function fitmoo_checkout_menu_alter(&$item) {
  // Hide the "Create new account" tab
  $item['user/register']['type'] = MENU_CALLBACK;
  $item['user/password']['type'] = MENU_CALLBACK;
}




